//# sourceMappingURL=wicket.js.map
/*


  Copyright (C) 2012 K. Arthur Endsley (kaendsle@mtu.edu)
  Michigan Tech Research Institute (MTRI)
  3600 Green Court, Suite 100, Ann Arbor, MI, 48105

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/
var Wkt=function(){var a,b;a=function(a,b){return a.substring(0,b.length)===b};b=function(a,b){return a.substring(a.length-b.length)===b};return{delimiter:" ",isArray:function(a){return!(!a||a.constructor!==Array)},trim:function(c,d){for(d=d||" ";a(c,d);)c=c.substring(1);for(;b(c,d);)c=c.substring(0,c.length-1);return c},Wkt:function(a){this.delimiter=Wkt.delimiter||" ";this.wrapVertices=!0;this.regExes={typeStr:/^\s*(\w+)\s*\(\s*(.*)\s*\)\s*$/,spaces:/\s+|\+/,numeric:/-*\d+(\.*\d+)?/,comma:/\s*,\s*/,
parenComma:/\)\s*,\s*\(/,coord:/-*\d+\.*\d+ -*\d+\.*\d+/,doubleParenComma:/\)\s*\)\s*,\s*\(\s*\(/,trimParens:/^\s*\(?(.*?)\)?\s*$/,ogcTypes:/^(multi)?(point|line|polygon|box)?(string)?$/i,crudeJson:/^{.*"(type|coordinates|geometries|features)":.*}$/};this.components=void 0;a&&"string"===typeof a?this.read(a):a&&this.fromObject(a)}}}();Wkt.Wkt.prototype.isCollection=function(){switch(this.type.slice(0,5)){case "multi":return!0;case "polyg":return!0;default:return!1}};
Wkt.Wkt.prototype.sameCoords=function(a,b){return a.x===b.x&&a.y===b.y};Wkt.Wkt.prototype.fromObject=function(a){a=a.hasOwnProperty("type")&&a.hasOwnProperty("coordinates")?this.fromJson(a):this.deconstruct.call(this,a);this.components=a.components;this.isRectangle=a.isRectangle||!1;this.type=a.type;return this};Wkt.Wkt.prototype.toObject=function(a){return this.construct[this.type].call(this,a)};Wkt.Wkt.prototype.toString=function(a){return this.write()};
Wkt.Wkt.prototype.fromJson=function(a){var b,c,d,f,e;this.type=a.type.toLowerCase();this.components=[];a=a.coordinates;if(!Wkt.isArray(a[0]))this.components.push({x:a[0],y:a[1]});else for(b in a)if(a.hasOwnProperty(b))if(Wkt.isArray(a[b][0])){e=[];for(c in a[b])if(a[b].hasOwnProperty(c))if(Wkt.isArray(a[b][c][0])){f=[];for(d in a[b][c])a[b][c].hasOwnProperty(d)&&f.push({x:a[b][c][d][0],y:a[b][c][d][1]});e.push(f)}else e.push({x:a[b][c][0],y:a[b][c][1]});this.components.push(e)}else"multipoint"===
this.type?this.components.push([{x:a[b][0],y:a[b][1]}]):this.components.push({x:a[b][0],y:a[b][1]});return this};
Wkt.Wkt.prototype.toJson=function(){var a,b,c,d,f,e,g;a=this.components;e=this.regExes.ogcTypes.exec(this.type).slice(1);g=[];for(b in e)e.hasOwnProperty(b)&&void 0!==e[b]&&g.push(e[b].toLowerCase().slice(0,1).toUpperCase()+e[b].toLowerCase().slice(1));b={coordinates:[],type:g.join("")};if("box"===this.type.toLowerCase()){b.type="Polygon";b.bbox=[];for(c in a)a.hasOwnProperty(c)&&(b.bbox=b.bbox.concat([a[c].x,a[c].y]));b.coordinates=[[[a[0].x,a[0].y],[a[0].x,a[1].y],[a[1].x,a[1].y],[a[1].x,a[0].y],
[a[0].x,a[0].y]]];return b}for(c in a)if(a.hasOwnProperty(c))if(Wkt.isArray(a[c])){g=[];for(d in a[c])if(a[c].hasOwnProperty(d))if(Wkt.isArray(a[c][d])){e=[];for(f in a[c][d])a[c][d].hasOwnProperty(f)&&e.push([a[c][d][f].x,a[c][d][f].y]);g.push(e)}else 1<a[c].length?g.push([a[c][d].x,a[c][d].y]):g=g.concat([a[c][d].x,a[c][d].y]);b.coordinates.push(g)}else 1<a.length?b.coordinates.push([a[c].x,a[c].y]):b.coordinates=b.coordinates.concat([a[c].x,a[c].y]);return b};
Wkt.Wkt.prototype.merge=function(a){var b=this.type.slice(0,5);if(this.type!==a.type&&this.type.slice(5,this.type.length)!==a.type)throw TypeError("The input geometry types must agree or the calling Wkt.Wkt instance must be a multigeometry of the other");switch(b){case "point":this.components=[this.components.concat(a.components)];break;case "multi":this.components=this.components.concat("multi"===a.type.slice(0,5)?a.components:[a.components]);break;default:this.components=[this.components,a.components]}"multi"!==
b&&(this.type="multi"+this.type)};
Wkt.Wkt.prototype.read=function(a){var b;if(b=this.regExes.typeStr.exec(a))this.type=b[1].toLowerCase(),this.base=b[2],this.ingest[this.type]&&(this.components=this.ingest[this.type].apply(this,[this.base]));else if(this.regExes.crudeJson.test(a))if("object"===typeof JSON&&"function"===typeof JSON.parse)this.fromJson(JSON.parse(a));else throw console.log("JSON.parse() is not available; cannot parse GeoJSON strings"),{name:"JSONError",message:"JSON.parse() is not available; cannot parse GeoJSON strings"};else throw console.log("Invalid WKT string provided to read()"),
{name:"WKTError",message:"Invalid WKT string provided to read()"};return this.components};Wkt.Wkt.prototype.write=function(a){var b,c,d;a=a||this.components;c=[];c.push(this.type.toUpperCase()+"(");for(b=0;b<a.length;b+=1){this.isCollection()&&0<b&&c.push(",");if(!this.extract[this.type])return null;d=this.extract[this.type].apply(this,[a[b]]);this.isCollection()&&"multipoint"!==this.type?c.push("("+d+")"):(c.push(d),b!==a.length-1&&"multipoint"!==this.type&&c.push(","))}c.push(")");return c.join("")};
Wkt.Wkt.prototype.extract={point:function(a){return String(a.x)+this.delimiter+String(a.y)},multipoint:function(a){var b,c=[],d;for(b=0;b<a.length;b+=1)d=this.extract.point.apply(this,[a[b]]),this.wrapVertices&&(d="("+d+")"),c.push(d);return c.join(",")},linestring:function(a){return this.extract.point.apply(this,[a])},multilinestring:function(a){var b,c=[];for(b=0;b<a.length;b+=1)c.push(this.extract.linestring.apply(this,[a[b]]));return c.join(",")},polygon:function(a){return this.extract.multilinestring.apply(this,
[a])},multipolygon:function(a){var b,c=[];for(b=0;b<a.length;b+=1)c.push("("+this.extract.polygon.apply(this,[a[b]])+")");return c.join(",")},box:function(a){return this.extract.linestring.apply(this,[a])},geometrycollection:function(a){console.log("The geometrycollection WKT type is not yet supported.")}};
Wkt.Wkt.prototype.ingest={point:function(a){a=Wkt.trim(a).split(this.regExes.spaces);return[{x:parseFloat(this.regExes.numeric.exec(a[0])[0]),y:parseFloat(this.regExes.numeric.exec(a[1])[0])}]},multipoint:function(a){var b,c;b=[];c=Wkt.trim(a).split(this.regExes.comma);for(a=0;a<c.length;a+=1)b.push(this.ingest.point.apply(this,[c[a]]));return b},linestring:function(a){var b,c;b=this.ingest.multipoint.apply(this,[a]);c=[];for(a=0;a<b.length;a+=1)c=c.concat(b[a]);return c},multilinestring:function(a){var b,
c,d;b=[];d=Wkt.trim(a).split(this.regExes.doubleParenComma);1===d.length&&(d=Wkt.trim(a).split(this.regExes.parenComma));for(a=0;a<d.length;a+=1)c=d[a].replace(this.regExes.trimParens,"$1"),b.push(this.ingest.linestring.apply(this,[c]));return b},polygon:function(a){var b,c,d,f,e;e=Wkt.trim(a).split(this.regExes.parenComma);c=[];for(a=0;a<e.length;a+=1){f=e[a].replace(this.regExes.trimParens,"$1").split(this.regExes.comma);d=[];for(b=0;b<f.length;b+=1)d.push({x:parseFloat(f[b].split(this.regExes.spaces)[0]),
y:parseFloat(f[b].split(this.regExes.spaces)[1])});c.push(d)}return c},box:function(a){var b,c;b=this.ingest.multipoint.apply(this,[a]);c=[];for(a=0;a<b.length;a+=1)c=c.concat(b[a]);return c},multipolygon:function(a){var b,c,d;b=[];d=Wkt.trim(a).split(this.regExes.doubleParenComma);for(a=0;a<d.length;a+=1)c=d[a].replace(this.regExes.trimParens,"$1"),b.push(this.ingest.polygon.apply(this,[c]));return b},geometrycollection:function(a){console.log("The geometrycollection WKT type is not yet supported.")}};